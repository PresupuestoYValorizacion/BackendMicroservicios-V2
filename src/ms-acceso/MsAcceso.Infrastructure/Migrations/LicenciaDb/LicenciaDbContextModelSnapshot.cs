// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MsAcceso.Infrastructure;

#nullable disable

namespace MsAcceso.Infrastructure.Migrations.LicenciaDb
{
    [DbContext(typeof(LicenciaDbContext))]
    partial class LicenciaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MsAcceso.Domain.Tenant.CarpetasPresupuestalesTenant.CarpetaPresupuestalTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Dependencia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Nivel")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Dependencia");

                    b.ToTable("carpetas_presupuestales", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.ClientesTenant.ClienteTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TipoClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoPersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.EspecialidadesTenant.EspecialidadTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProyectoTenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoTenantId");

                    b.ToTable("especialidades", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PartidasRecursosTenant.PartidaRecursoTenant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("Cantidad")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Cuadrilla")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("Parcial")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<Guid>("PartidaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Precio")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartidaId");

                    b.HasIndex("RecursoId");

                    b.ToTable("partida_recurso", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PartidasTenant.PartidaTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Dependencia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Nivel")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Dependencia");

                    b.ToTable("partidas", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosPartidasRecursosTenant.PresupuestoEspecialidadTituloPartidaRecursoTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("Cantidad")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Cuadrilla")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("Parcial")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("Precio")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<Guid>("PresupuestoEspecialidadTituloPartidaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PresupuestoEspecialidadTituloPartidaId");

                    b.HasIndex("RecursoId");

                    b.ToTable("presupuestos_especialidad_titulos_partidas_recursos", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosPartidasTenant.PresupuestoEspecialidadTituloPartidaTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correlativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PartidaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PresupuestoEspecialidadTituloId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartidaId");

                    b.HasIndex("PresupuestoEspecialidadTituloId");

                    b.ToTable("presupuestos_especialidad_titulos_partidas", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosTenant.PresupuestoEspecialidadTituloTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correlativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Dependencia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EspecialidadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Nivel")
                        .HasColumnType("int");

                    b.Property<Guid?>("TituloId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Dependencia");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("TituloId");

                    b.ToTable("presupuestos_especialidad_titulos", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosTenant.PresupuestoTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CarpetaPresupuestalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DistritoId")
                        .HasColumnType("int");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JornadaDiariaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MonedaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Plazodias")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("PresupuestoBaseCD")
                        .HasColumnType("float");

                    b.Property<double?>("PresupuestoBaseDI")
                        .HasColumnType("float");

                    b.Property<double?>("PresupuestoOfertaCD")
                        .HasColumnType("float");

                    b.Property<double?>("PresupuestoOfertaDI")
                        .HasColumnType("float");

                    b.Property<int?>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPresupuestoBase")
                        .HasColumnType("float");

                    b.Property<double?>("TotalPresupuestoOferta")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarpetaPresupuestalId");

                    b.HasIndex("ClienteId");

                    b.ToTable("presupuestos", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.ProyectosTenant.ProyectoTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correlativo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PresupuestoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PresupuestoId")
                        .IsUnique()
                        .HasFilter("[PresupuestoId] IS NOT NULL");

                    b.ToTable("proyectos", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.RecursosTenant.RecursoTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TipoRecursoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("recursos", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.TitulosTenant.TituloTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("titulos", (string)null);
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.CarpetasPresupuestalesTenant.CarpetaPresupuestalTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.CarpetasPresupuestalesTenant.CarpetaPresupuestalTenant", "DependenciaModel")
                        .WithMany("CarpetasPresupuestales")
                        .HasForeignKey("Dependencia");

                    b.Navigation("DependenciaModel");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.EspecialidadesTenant.EspecialidadTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.ProyectosTenant.ProyectoTenant", "ProyectoTenant")
                        .WithMany("Especialidades")
                        .HasForeignKey("ProyectoTenantId");

                    b.Navigation("ProyectoTenant");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PartidasRecursosTenant.PartidaRecursoTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.PartidasTenant.PartidaTenant", "Partida")
                        .WithMany("PartidasRecursos")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsAcceso.Domain.Tenant.RecursosTenant.RecursoTenant", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partida");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PartidasTenant.PartidaTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.PartidasTenant.PartidaTenant", "DependenciaModel")
                        .WithMany("Partidas")
                        .HasForeignKey("Dependencia");

                    b.Navigation("DependenciaModel");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosPartidasRecursosTenant.PresupuestoEspecialidadTituloPartidaRecursoTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosPartidasTenant.PresupuestoEspecialidadTituloPartidaTenant", "PresupuestoEspecialidadTituloPartida")
                        .WithMany()
                        .HasForeignKey("PresupuestoEspecialidadTituloPartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsAcceso.Domain.Tenant.RecursosTenant.RecursoTenant", "Recurso")
                        .WithMany("PresupuestosEspecialidadesTitulosPartidasRecursos")
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PresupuestoEspecialidadTituloPartida");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosPartidasTenant.PresupuestoEspecialidadTituloPartidaTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.PartidasTenant.PartidaTenant", "Partida")
                        .WithMany("PresupuestosEspecialidadesTitulosPartidas")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosTenant.PresupuestoEspecialidadTituloTenant", "PresupuestoEspecialidadTitulo")
                        .WithMany()
                        .HasForeignKey("PresupuestoEspecialidadTituloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partida");

                    b.Navigation("PresupuestoEspecialidadTitulo");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosTenant.PresupuestoEspecialidadTituloTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosTenant.PresupuestoEspecialidadTituloTenant", "DependenciaModel")
                        .WithMany("PresupuestosEspecialidadTitulos")
                        .HasForeignKey("Dependencia");

                    b.HasOne("MsAcceso.Domain.Tenant.EspecialidadesTenant.EspecialidadTenant", "Especialidad")
                        .WithMany("PresupuestosEspecialidadTitulos")
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("MsAcceso.Domain.Tenant.TitulosTenant.TituloTenant", "Titulo")
                        .WithMany("PresupuestosEspecialidadesTitulos")
                        .HasForeignKey("TituloId");

                    b.Navigation("DependenciaModel");

                    b.Navigation("Especialidad");

                    b.Navigation("Titulo");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosTenant.PresupuestoTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.CarpetasPresupuestalesTenant.CarpetaPresupuestalTenant", "CarpetaPresupuestal")
                        .WithMany()
                        .HasForeignKey("CarpetaPresupuestalId");

                    b.HasOne("MsAcceso.Domain.Tenant.ClientesTenant.ClienteTenant", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("CarpetaPresupuestal");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.ProyectosTenant.ProyectoTenant", b =>
                {
                    b.HasOne("MsAcceso.Domain.Tenant.PresupuestosTenant.PresupuestoTenant", "Presupuesto")
                        .WithOne("ProyectoTenant")
                        .HasForeignKey("MsAcceso.Domain.Tenant.ProyectosTenant.ProyectoTenant", "PresupuestoId");

                    b.Navigation("Presupuesto");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.CarpetasPresupuestalesTenant.CarpetaPresupuestalTenant", b =>
                {
                    b.Navigation("CarpetasPresupuestales");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.EspecialidadesTenant.EspecialidadTenant", b =>
                {
                    b.Navigation("PresupuestosEspecialidadTitulos");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PartidasTenant.PartidaTenant", b =>
                {
                    b.Navigation("Partidas");

                    b.Navigation("PartidasRecursos");

                    b.Navigation("PresupuestosEspecialidadesTitulosPartidas");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosEspecialidadTitulosTenant.PresupuestoEspecialidadTituloTenant", b =>
                {
                    b.Navigation("PresupuestosEspecialidadTitulos");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.PresupuestosTenant.PresupuestoTenant", b =>
                {
                    b.Navigation("ProyectoTenant");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.ProyectosTenant.ProyectoTenant", b =>
                {
                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.RecursosTenant.RecursoTenant", b =>
                {
                    b.Navigation("PresupuestosEspecialidadesTitulosPartidasRecursos");
                });

            modelBuilder.Entity("MsAcceso.Domain.Tenant.TitulosTenant.TituloTenant", b =>
                {
                    b.Navigation("PresupuestosEspecialidadesTitulos");
                });
#pragma warning restore 612, 618
        }
    }
}
